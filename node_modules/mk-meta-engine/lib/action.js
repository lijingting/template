'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

exports.default = creator;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mkAppLoader = require('mk-app-loader');

var _common = require('./common');

var common = _interopRequireWildcard(_common);

var _mkUtils = require('mk-utils');

var _mkUtils2 = _interopRequireDefault(_mkUtils);

var _immutable = require('immutable');

var _context = require('./context');

var _context2 = _interopRequireDefault(_context);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appInstances = {};

var action = function action(option) {
	var _this = this;

	(0, _classCallCheck3.default)(this, action);

	this.config = function (_ref) {
		var metaHandlers = _ref.metaHandlers;

		_this.metaHandlers = metaHandlers;
	};

	this.initView = function (component, injections) {
		_this.component = component;
		_this.injections = injections;

		appInstances[component.props.appFullName] = {
			appName: component.props.appName,
			appQuery: component.props.appQuery,
			//app: config.getApps()[component.props.appName],
			instance: component
		};

		_this.metaHandlers && _this.metaHandlers['onInit'] && _this.metaHandlers['onInit']({ component: component, injections: injections });
	};

	this.unmount = function () {
		delete appInstances[_this.component.appFullName];
	};

	this.getAppInstances = function () {
		return appInstances;
	};

	this.getField = function (fieldPath) {
		return common.getField(_this.injections.getState(), fieldPath);
	};

	this.getFields = function (fieldPaths) {
		return common.getFields(_this.injections.getState(), fieldPaths);
	};

	this.setField = function (fieldPath, value) {
		return _this.injections.reduce('setField', fieldPath, value);
	};

	this.setFields = function (values) {
		return _this.injections.reduce('setFields', values);
	};

	this.parseExpreesion = function (v) {
		if (!_this.cache.expression) _this.cache.expression = {};

		if (_this.cache.expression[v]) {
			return _this.cache.expression[v];
		}

		if (!_this.cache.expressionParams) {
			_this.cache.expressionParams = ['data'].concat((0, _keys2.default)(_this.metaHandlers).map(function (k) {
				return "$" + k;
			})).concat(['_path', '_rowIndex', '_vars', '_fullPath']);
		}

		var params = _this.cache.expressionParams;

		var body = _mkUtils2.default.expression.getExpressionBody(v);

		_this.cache.expression[v] = new (Function.prototype.bind.apply(Function, [null].concat((0, _toConsumableArray3.default)(params), [body])))();
		return _this.cache.expression[v];
	};

	this.execExpression = function (v, meta, data, path, rowIndex, vars) {
		var f = _this.parseExpreesion(v);
		var values = [data];

		(0, _keys2.default)(_this.metaHandlers).forEach(function (k) {
			values.push(function () {
				var _metaHandlers;

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return (_metaHandlers = _this.metaHandlers)[k].apply(_metaHandlers, args.concat([{ currentPath: path, rowIndex: rowIndex, vars: vars }]));
			});
		});

		values = values.concat([path, rowIndex, vars, meta.path]);
		try {
			return f.apply(_this, values);
		} catch (e) {
			_mkUtils2.default.exception.error(e);
		}
	};

	this.updateMeta = function (meta, path, rowIndex, vars, data) {
		//存在name和component属性追加path路径
		if (meta.name && meta.component) {
			meta.path = vars ? path + ', ' + vars.join(',') : path;
		}

		if (meta["_power"]) return;

		var excludeProps = meta["_excludeProps"];
		if (excludeProps && _mkUtils2.default.expression.isExpression(excludeProps)) {
			excludeProps = _this.execExpression(excludeProps, meta, data, path, rowIndex, vars);
		}

		//去除meta的排除属性
		if (excludeProps && excludeProps instanceof Array) {
			excludeProps.forEach(function (k) {
				if (meta[k]) delete meta[k];
			});
		}

		(0, _keys2.default)(meta).forEach(function (key) {
			var v = meta[key],
			    t = typeof v === 'undefined' ? 'undefined' : (0, _typeof3.default)(v),
			    currentPath = path;

			if (t == 'string' && _mkUtils2.default.expression.isExpression(v)) {
				var ret = _this.execExpression(v, meta, data, currentPath, rowIndex, vars);

				if (key == '...' && ret && (typeof ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(ret)) == 'object') {
					(0, _keys2.default)(ret).forEach(function (kk) {
						meta[kk] = function () {
							return ret[kk];
						};
					});
					delete meta['...'];
				} else {
					meta[key] = function () {
						return ret;
					};
				}
			} else if (v instanceof Array) {

				v.forEach(function (c, index) {
					if (typeof c == 'string' && _mkUtils2.default.expression.isExpression(c)) {
						meta[key][index] = _this.execExpression(c, meta, data, currentPath, rowIndex, vars);
					} else {
						currentPath = path;
						if (c.name && c.component) {
							currentPath = currentPath ? currentPath + '.' + key + '.' + c.name : key + '.' + c.name;
						}
						_this.updateMeta(c, currentPath, rowIndex, vars, data);
					}
				});
			} else if (t == 'object') {
				if (v.name && v.component) {
					currentPath = currentPath ? currentPath + '.' + key + '.' + v.name : key + '.' + v.name;
				}
				_this.updateMeta(meta[key], currentPath, rowIndex, vars, data);
			}
		});
	};

	this.getMeta = function (fullPath, propertys, data) {
		var meta = common.getMeta(_this.appInfo, fullPath, propertys),
		    parsedPath = _mkUtils2.default.path.parsePath(fullPath),
		    path = parsedPath.path,
		    rowIndex = parsedPath.vars ? parsedPath.vars[0] : undefined,
		    vars = parsedPath.vars;

		if (!data) data = common.getField(_this.injections.getState()).toJS();

		meta['_power'] = undefined;
		_this.updateMeta(meta, path, rowIndex, vars, data);
		return meta;
	};

	this.setMetaForce = function (appName, meta) {
		common.setMetaForce(appName, meta);
	};

	this.focus = function (path) {
		if (_this.isFocus(path)) return false;
		_this.setField('data.other.focusFieldPath', path);
		return true;
	};

	this.focusByEvent = function (e) {
		var path = _mkUtils2.default.path.findPathByEvent(e);
		return _this.focus(path);
	};

	this.isFocus = function (path) {
		if (!path) return false;
		var focusFieldPath = _this.getField('data.other.focusFieldPath');
		if (!focusFieldPath) return false;
		return path.replace(/\s/g, '') == focusFieldPath.replace(/\s/g, '');
	};

	this.getDirectFuns = function () {
		return {
			getMeta: function getMeta() {
				return _this.getMeta.apply(_this, arguments);
			},
			getField: function getField(fieldPath) {
				return _this.getField(fieldPath);
			},
			gm: function gm() {
				return _this.getMeta.apply(_this, arguments);
			},
			gf: function gf(fieldPath) {
				return _this.getField(fieldPath);
			}
		};
	};

	this.toast = function () {
		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		var Toast = _config2.default.getToast();
		if (!Toast || args.length == 0 || !Toast[args[0]]) return;
		Toast[args[0]].apply(Toast, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.notification = function () {
		for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			args[_key3] = arguments[_key3];
		}

		var Notification = _config2.default.getNotification();
		if (!Notification || args.length == 0 || !Notification[args[0]]) return;
		Notification[args[0]].apply(Notification, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.modal = function () {
		for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
			args[_key4] = arguments[_key4];
		}

		var Modal = _config2.default.getModal();
		if (!Modal || args.length == 0 || !Modal[args[0]]) return;
		return Modal[args[0]].apply(Modal, (0, _toConsumableArray3.default)(args.slice(1)));
	};

	this.loadApp = function (name, props) {
		return _react2.default.createElement(_mkAppLoader.AppLoader, (0, _extends3.default)({}, props, { name: name }));
	};

	this.gm = this.getMeta;
	this.gf = this.getField;
	this.gfs = this.getFields;
	this.sf = this.setField;
	this.sfs = this.setFields;
	this.findPathByEvent = _mkUtils2.default.path.findPathByEvent;
	this.stringToMoment = _mkUtils2.default.moment.stringToMoment;
	this.momentToString = _mkUtils2.default.moment.momentToString;
	this.fromJS = _immutable.fromJS;
	this.context = _context2.default;

	this.appInfo = option.appInfo;
	this.meta = (0, _immutable.fromJS)(option.appInfo.meta);
	this.cache = {};

	common.setMeta(option.appInfo);
};

function creator(option) {
	return new action(option);
}
module.exports = exports['default'];